{"swagger": "2.0", "info": {"title": "Eden AI API Documentation", "description": "<a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>.\n# Welcome \nEden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform.\nThe platform covers a wide range of AI technologies:\n* Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>.\n* Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>.\n* Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>.\n* OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>.\n* Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>.\n* Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.\n\nFor all the proposed technologies, we provide a single endpoint: \nthe service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog\n\n# Support & community\n\n### 1- Support\nIf you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI. \n\n### 2- Community\n\nYou can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.\n\nWe are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.\n\n### 3- Blog\n\nWe also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.\n\n\n# Authentication \n## Create account\n![Register](/static/images/register.png)\n\nTo create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.). \n\nBy creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co\n\n![Login](/static/images/login.png)\n## API key \nBy going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI. \n\n![api_key](/static/images/api_key.png)\n\n## Sandbox API key \nBy going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will also have access to your **Sandbox** API key that will allow you to make free calls and get dummy responses in order to implement and debug Eden AI without consuming credits. \n\n![api_key](/static/images/sandbox_api_key.png)\n\n# Portal Guide \nEden AI provides a web portal that allows you to do several tasks:\n\n![portal](/static/images/portal.png)\n\n### 1- Benchmark and test\nThe platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.  \n![benchmark](/static/images/benchmark.png)\n\n### 2- Cost management\nThe <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis. \n\nThis page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines. \n\n![cost-management](/static/images/cost_management.png)\n### 3- Account\nThe <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed. \n\nThis page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI. \n\n![account](/static/images/account.png)\n\n\n# API Guide \nEden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change.\n", "contact": {"name": "Eden AI support", "url": "https://www.edenai.co", "email": "contact@edenai.co"}, "x-logo": {"url": "/static/images/eden-ai.png", "backgroundColor": "#FFFFFF"}, "version": "v1"}, "host": "api.edenai.run", "schemes": ["https"], "basePath": "/v1", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}}, "security": [{"Bearer": []}], "paths": {"/automl/text/project": {"get": {"operationId": "automl_text_project_list", "description": "AutoML Text Project List", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"projects": [{"public_id": "String", "name": "String", "created_at": "String [ISO fromat date]", "project_description": "String", "total_number_docs": "Integer", "language": "String", "type": "String"}, {"public_id": "String", "name": "String", "created_at": "String [ISO fromat date]", "project_description": "", "total_number_docs": "Integer", "language": "String", "type": "String"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "post": {"operationId": "automl_text_project_create", "description": "\n\n**SUPPORTED FILES**\n\nThe API takes csv files separated using ','. The csv must contain a header and exactly two columns, named `docs` and `labels` In case a document might have several labels, please separate your labels using '|' \n\n\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|---------------------------|-------------------------------|---------------|\n| **English (US)**|*`string`*|`en`|\n| **French**      |*`string`*|`fr`|\n| **German**      |*`string`*|`de`|\n| **Italian**     |*`string`*|`it`|\n| **Portuguese**  |*`string`*|`pt`|\n| **Arabic**      |*`string`*|`ar`|\n| **Chinese-Simplified**|*`string`*|`zh`|\n| **Chinese-Traditional**|*`string`*|`zh-TW`|\n| **Korean**      |*`string`*|`ko`|\n| **Japanese**    |*`string`*|`ja`|\n| **Hindi**       |*`string`*|`hi`|\n| **Spanish**     |*`string`*|`es`|\n\n\n\n**AVAILABLE CLASSIFICATION TYPES**\n\n|Type|Value|Description|\n|---------------------------|-------------------------------|---------------|\n| **Single Label Classification**|`single_label_classification`|Each document belongs to one category (label)|\n| **Multi Label Classification**|`multi_label_classification`|Documents might have several labels|\n\n", "parameters": [{"name": "project_name", "in": "formData", "required": true, "type": "string", "maxLength": 100, "minLength": 1}, {"name": "project_description", "in": "formData", "required": true, "type": "string", "maxLength": 300, "minLength": 1}, {"name": "files", "in": "formData", "required": true, "type": "file"}, {"name": "type", "in": "formData", "required": true, "type": "string", "maxLength": 100, "minLength": 1}, {"name": "language", "in": "formData", "required": true, "type": "string", "maxLength": 100, "minLength": 1}], "responses": {"200": {"description": "Success", "examples": {"application/json": {"project_id": "String [unique identifier for project]"}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": []}, "/automl/text/project/{project_id}": {"get": {"operationId": "automl_text_project_detail", "description": "AutoML Text Project Detail", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"project": {"public_id": "String [project identifier]", "name": "String", "created_at": "String [ISO fromat date]", "project_description": "", "total_number_docs": "Integer", "language": "String", "type": "String"}, "providers_state": [{"public_id": "String [train identifier]", "provider": "String", "training_name": "String", "state": "String", "execution_time": "Float", "accuracy": "Float", "created_at": "String [ISO fromat date]", "errors": "String"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "put": {"operationId": "automl_text_project_update", "description": "AutoML Text Project Update", "parameters": [{"name": "project_name", "in": "formData", "required": true, "type": "string", "maxLength": 100, "minLength": 1}, {"name": "project_description", "in": "formData", "required": true, "type": "string", "maxLength": 300, "minLength": 1}, {"name": "type", "in": "formData", "required": true, "type": "string", "maxLength": 100, "minLength": 1}, {"name": "language", "in": "formData", "required": true, "type": "string", "maxLength": 100, "minLength": 1}], "responses": {"200": {"description": "Success", "examples": {"application/json": {"response": "Project updated"}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "delete": {"operationId": "automl_text_project_delete", "description": "AutoML Text Project Delete", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"response": "Project deleted"}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": [{"name": "project_id", "in": "path", "required": true, "type": "string"}]}, "/automl/text/project/{project_id}/train": {"post": {"operationId": "automl_text_data_train", "description": "\n\n**AVAILABLE PROVIDERS**\n\n|Name|Value|\n|-------------------------------|---------------|\n|[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|`google`|\n|[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|`amazon`|\n\n", "parameters": [{"name": "provider", "in": "formData", "required": true, "type": "string", "minLength": 1}, {"name": "training_name", "in": "formData", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "examples": {"application/json": {"result": [{"solution_name": "", "train_id": "", "training_name": "", "type": "", "training_state": "", "state": "success"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": [{"name": "project_id", "in": "path", "required": true, "type": "string"}]}, "/automl/text/project/{project_id}/train/{train_id}": {"get": {"operationId": "automl_text_data_train_detail", "description": "AutoML Text Data Train Detail", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"train": {"public_id": "", "provider": "", "training_name": "", "state": "", "execution_time": "", "accuracy": "", "created_at": "", "errors": ""}}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "delete": {"operationId": "automl_text_data_delete", "description": "AutoML Text Data Delete", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"response": "Train deleted"}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": [{"name": "project_id", "in": "path", "required": true, "type": "string"}, {"name": "train_id", "in": "path", "required": true, "type": "string"}]}, "/automl/text/project/{project_id}/train/{train_id}/prediction": {"post": {"operationId": "automl_text_data_launch_prediction", "description": "\n\n**SUPPORTED FILES**\n\nThe API takes a csv file with no header and only one column, where each line contains a document to classify.\n\n", "parameters": [{"name": "files", "in": "formData", "required": true, "type": "file"}], "responses": {"200": {"description": "Success", "examples": {"application/json": {"result": {"solution_name": "string", "prdiction_id": "string", "result": "prediction running"}}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": [{"name": "project_id", "in": "path", "required": true, "type": "string"}, {"name": "train_id", "in": "path", "required": true, "type": "string"}]}, "/automl/text/project/{project_id}/train/{train_id}/prediction/{predict_id}": {"get": {"operationId": "automl_text_data_prediction_detail", "description": "\n\n**SUPPORTED FILES**\n\nThe API takes a csv file with no header and only one column, where each line contains a document to classify.\n\n", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"predict": {"public_id": "ab6fd589-73ff-425c-8052-e9b262343d96", "execution_time": "None", "state": "string [prediction running/done/fail]", "created_at": "string", "errors": "string[ errors in case of failure]"}}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": [{"name": "predict_id", "in": "path", "required": true, "type": "string"}, {"name": "project_id", "in": "path", "required": true, "type": "string"}, {"name": "train_id", "in": "path", "required": true, "type": "string"}]}, "/automl/text/project/{project_id}/train/{train_id}/prediction/{predict_id}/results": {"get": {"operationId": "automl_text_data_prediction_results", "description": "\n\n**SUPPORTED FILES**\n\nThe API takes a csv file with no header and only one column, where each line contains a document to classify.\n\n", "parameters": [], "responses": {"200": {"description": "Success", "examples": {"application/json": {"result": [{"solution_name": "string", "prdiction_id": "string", "result": "Array of prediction for each line"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["AutoML Text Data"]}, "parameters": [{"name": "predict_id", "in": "path", "required": true, "type": "string"}, {"name": "project_id", "in": "path", "required": true, "type": "string"}, {"name": "train_id", "in": "path", "required": true, "type": "string"}]}, "/pipelines": {"post": {"operationId": "Pipelines", "description": "Pipelines let you combine different AI APIs from different providers into a single ready to use pipeline that you can run on your data.\n\n **AVAILABLE FEATURES** \n\n|Feature                   |Value|Can be first|Can be followed by|\n|--------------------------|-----------------------|------------|------------------|\n|**OCR**                     |`ocr`                  |`True`      |Sentiment Analysis, Syntax Analysis, Keyword Analysis, Named Entity Recognition, Text to speech, Translation,  Language Detection  |\n|**Translation**             |`automatic_translation`|`True`      |Sentiment Analysis, Syntax Analysis, Keyword Analysis, Named Entity Recognition, Text to speech, Language Detection                |\n|**Speech recognition**      |`speech_to_text`       |`True`      |Sentiment Analysis, Syntax Analysis, Keyword Analysis, Named Entity Recognition, Text to speech, Translation,  Language Detection  |\n|**Sentiment Analysis**      |`sentiment_analysis`   |`False`     |None                                                                                                                               |\n|**Syntax Analysis**         |`syntax_analysis`      |`False`     |None                                                                                                                               |\n|**Keyword Analysis**        |`keyword_extraction`   |`False`     |None                                                                                                                               |\n|**Named Entity Recognition**|`language_detection`   |`False`-    |None                                                                                                                               |\n|**Language Detection**      |`language_detection`   |`False`     |None                                                                                                                               |\n|**Text to speech**          |`text_to_speech`       |`False`     |None                                                                                                                               |\n", "parameters": [{"name": "description", "in": "formData", "description": "The desciption field must be an array of ordered dictionaries.\n                                                     Each dictionary describes the feature to call. in fact, it has to contain two keys \"feature\" and \"params\". \n\n* feature conatins a string (the value of the feature ex : automatic_translation).\n\n* params contains a dictionary of parameters to be used to call the feature, see the feature corresponding documentation to know which parameters well be needed.\n\n ex : `[ { \"feature\": \"ocr\",  \"params\": { \"providers\": \"['amazon']\",\"language\": \"en-US\" } }, { \"feature\": \"syntax_analysis\",  \"params\": { \"providers\": \"['amazon']\",\"language\": \"en-US\" } }]`                                                      ", "required": true, "type": "string", "minLength": 1}, {"name": "text", "in": "formData", "description": "The input text for the first feature of the pipeline", "required": false, "type": "string", "minLength": 1}, {"name": "files", "in": "formData", "description": "The input file for the first feature of the pipeline", "required": false, "type": "file"}, {"name": "return_only_last", "in": "formData", "description": "This parameter allows user to choose to output only the final result or all the intermediate results.", "required": true, "type": "boolean"}], "responses": {"200": {"description": "Success", "schema": {"type": "object", "properties": {"result": {"description": "object", "type": "object"}}}, "examples": {"application/json": {"result": {"solution_name": "edenai", "provider": "edenai", "execution_time": "Float", "result": "Result of the last feature of the pipeline", "last_feature": "String"}}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["Pipelines"]}, "parameters": []}, "/pretrained/audio/speech_recognition_async": {"post": {"operationId": "async_speech_to_text", "description": "Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English (US)**|`string`|`en-US`|\n|**English (GB)**|`string`|`en-GB`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**Dutch (Netherlands)**|`string`|`nl-NL`|\n|**Japanese**|`string`|`ja-JP`|\n|**Russian**|`string`|`ru-RU`|\n|**Arabic**|`string`|`ar-SA`|\n|**Italian**|`string`|`it-IT`|\n|**Korean**|`string`|`ko-KR`|\n|**Portuguese**|`string`|`pt-PT`|\n|**Turkish**|`string`|`tr-TR`|\n|**Indonesian**|`string`|`id-ID`|\n|**Malay**|`string`|`ms-MY`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "language", "in": "formData", "description": "Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))", "required": true, "type": "string", "minLength": 1}, {"name": "files", "in": "formData", "description": "File to analyse\t(ex: mp3, wav, m4a)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google', 'threescribe])", "required": true, "type": "string", "minLength": 1}, {"name": "webhook_receiver", "in": "formData", "description": "Webhook reciever should be a valid https URL (ex : https://your.listner.com/endpoint)", "required": false, "type": "string", "minLength": 1}, {"name": "users_webhook_parameters", "in": "formData", "description": "Json data that consist of additional parameters that will be sent back to the webhook receiver (ex: api key for security).                    **NOTE : The data will be returned back as a string that should be decoded into a json object!**", "required": false, "type": "string", "minLength": 1}, {"name": "vocab", "in": "formData", "description": "Speechmatics allows to add a custom vocab dictionnary (json format) for better recognition, you can add it via this parameter.                     It has to be a list of dictionaries : {'content'(Required) : 'string', 'sounds_like'(Optional) : 'list of strings'}", "required": false, "type": "string", "maxLength": 1000, "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "launch async speech to text job", "type": "object", "properties": {"result": {"type": "object", "properties": {"job_id": {"type": "string"}, "status": {"type": "string"}}}}}, "examples": {"application/json": {"result": {"job_id": "uuid of the launched job", "status": "processing"}}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["Speech"]}, "parameters": []}, "/pretrained/audio/speech_recognition_async/{job_id}": {"get": {"operationId": "async_speech_to_text", "description": "This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results if they are ready.", "parameters": [], "responses": {"200": {"description": "Success", "schema": {"description": "object", "type": "object", "properties": {"job_id": {"type": "string"}, "status": {"type": "string"}, "audio_name": {"type": "string"}, "results": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "transcript": {"type": "string"}, "status": {"type": "string"}, "error": {"type": "string"}}}}}}, "examples": {"application/json": {"job_id": "uuid of the launched job", "status": "finished", "audio_name": "name of the file", "results": "Array of the the results of each provider"}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "tags": ["Speech"]}, "parameters": [{"name": "job_id", "in": "path", "required": true, "type": "string"}]}, "/pretrained/audio/speech_to_text": {"post": {"operationId": "speech_to_text", "description": "Speech recognition is technology that can recognize spoken words, which can then be converted to text.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English (US)**|`string`|`en-US`|\n|**English (GB)**|`string`|`en-GB`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**Dutch (Netherlands)**|`string`|`nl-NL`|\n|**Japanese**|`string`|`ja-JP`|\n|**Russian**|`string`|`ru-RU`|\n|**Arabic**|`string`|`ar-SA`|\n|**Italian**|`string`|`it-IT`|\n|**Korean**|`string`|`ko-KR`|\n|**Portuguese**|`string`|`pt-PT`|\n|**Turkish**|`string`|`tr-TR`|\n|**Indonesian**|`string`|`id-ID`|\n|**Malay**|`string`|`ms-MY`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "language", "in": "formData", "description": "Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))", "required": true, "type": "string", "minLength": 1}, {"name": "files", "in": "formData", "description": "File to analyse\t(ex: mp3, wav, m4a)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google', 'threescribe])", "required": true, "type": "string", "minLength": 1}, {"name": "vocab", "in": "formData", "description": "Speechmatics allows to add a custom vocab dictionnary (json format) for better recognition, you can add it via this parameter.                     It has to be a list of dictionaries : {'content'(Required) : 'string', 'sounds_like'(Optional) : 'list of strings'}", "required": false, "type": "string", "maxLength": 1000, "minLength": 1}], "responses": {"201": {"description": "Success", "schema": {"description": "speech to text response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"transcribe": {"type": "string"}, "confidence": {"type": "number"}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"transcribe": "String [Transcription text of input audio file]", "confidence": "Float "}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["Speech"]}, "parameters": []}, "/pretrained/audio/text_to_speech": {"post": {"operationId": "text_to_speech", "description": "Text-to-speech (TTS) system converts normal language text into speech.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**Arabic**|`string`|`ar-XA`|\n|**Chinese**|`string`|`cmn-CN`|\n|**Danish**|`string`|`da-DK`|\n|**Dutch**|`string`|`nl-NL`|\n|**English (US)**|`string`|`en-US`|\n|**English (UK)**|`string`|`en-GB`|\n|**German**|`string`|`de-DE`|\n|**Italy**|`string`|`it-IT`|\n|**Japanese**|`string`|`ja-JP`|\n|**Portuguese (Brazil)**|`string`|`pt-BR`|\n|**Portuguese (Portugal)**|`string`|`pt-PT`|\n|**Russian**|`string`|`ru-RU`|\n|**Spanish**|`string`|`es-ES`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "text", "in": "formData", "description": "Text to transform", "required": true, "type": "string", "minLength": 1}, {"name": "language", "in": "formData", "description": "Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "option", "in": "formData", "description": "Voice gender selected (ex: FEMALE ou MALE)", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"201": {"description": "Success", "schema": {"description": "text to speech response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "audio_path": {"type": "string"}, "voice_type": {"type": "string"}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"audio_path": "String [path to output audio]", "text": "String [input text to convert to audio]", "voice_type": "Integer"}, "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded"], "tags": ["Speech"]}, "parameters": []}, "/pretrained/ocr/ocr": {"post": {"operationId": "ocr", "description": "Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**Arabic**|`string`|`ar-XA`|\n|**Chinese - Simplified**|`string`|`zh-CN`|\n|**Chinese - Traditional**|`string`|`zh-TW`|\n|**Czech**|`string`|`cz-CZ`|\n|**Danish**|`string`|`da-DK`|\n|**Dutch**|`string`|`nl-NL`|\n|**English**|`string`|`en-US`|\n|**Finnish**|`string`|`fn-FN`|\n|**French**|`string`|`fr-FR`|\n|**German**|`string`|`de-DE`|\n|**Greek**|`string`|`gr-GR`|\n|**Hungarian**|`string`|`hu-HU`|\n|**Italian**|`string`|`it-IT`|\n|**Japanese**|`string`|`ja-JP`|\n|**Korean**|`string`|`ko-KR`|\n|**Polish**|`string`|`pl-PO`|\n|**Portuguese**|`string`|`pt-PT`|\n|**Russian**|`string`|`ru-RU`|\n|**Swedish**|`string`|`sw-SW`|\n|**Spanish**|`string`|`es-ES`|\n|**Turkish**|`string`|`tr-TR`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "files", "in": "formData", "description": "File to analyse (ex: pdf, jpg, jpeg, png, tiff)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Providers to compare (ex: [ 'amazon', 'microsoft', 'ibm', 'google'])", "required": true, "type": "string", "minLength": 1}, {"name": "language", "in": "formData", "description": "Language code expected (ex: fr-FR)", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "ocr response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "bounding_boxes": {"type": "array", "items": {"type": "object", "properties": {"word_text": {"type": "string"}, "left": {"type": "number"}, "top": {"type": "number"}, "width": {"type": "number"}, "hight": {"type": "number"}}}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"text": "String", "bounding_boxes": {"word_text": "string", "left": "float", "top": "float", "width": "float", "height": "float"}}, "original_result": "Json with original response of provider", "number_of_pages": "Integer", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["OCR"]}, "parameters": []}, "/pretrained/ocr/ocr_invoice": {"post": {"operationId": "ocr_invoice", "description": "The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "files", "in": "formData", "description": "File Image to analyse (ex: pdf, jpg, jpeg, png)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'mindee', 'microsoft'])", "required": true, "type": "string", "minLength": 1}, {"name": "language", "in": "formData", "description": "Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "ocr invoice response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "array", "type": "array", "items": {"type": "object", "properties": {"text": {"type": "string"}, "results": {"type": "array", "items": {"type": "object", "properties": {"word_text": {"type": "string"}, "left": {"type": "number"}, "top": {"type": "number"}, "width": {"type": "number"}, "hight": {"type": "number"}, "customer_information": {"type": "object", "properties": {"customer_address": {"type": "string"}, "customer_name": {"type": "string"}}}, "merchant_information": {"type": "object", "properties": {"merchant_address": {"type": "string"}, "merchant_name": {"type": "string"}}}, "invoice_total": {"type": "string"}, "subtotal": {"type": "string"}, "date": {"type": "string"}, "due_date": {"type": "string"}, "invoice_number": {"type": "string"}, "taxes": {"type": "string"}, "locale": {"type": "object", "properties": {"currency": {"type": "string"}, "language": {"type": "string"}}}, "item_lines": {"type": "array", "items": {"type": "object", "properties": {"amount": {"type": "string"}, "description": {"type": "string"}, "quantity": {"type": "string"}, "unit_price": {"type": "string"}}}}}}}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": [{"customer_information": "Json with extracted information about the customer", "merchant_information": "Json with extracted information about the merchant", "invoice_total": "Float", "invoice_subtotal": "Float", "date": "String [ISO date format]", "due_date": "String [ISO date format]", "invoice_number": "String", "taxes": "", "locale": {"currency": "String [ISO currency format]", "language": "String [ISO language format]"}, "item_lines": [{"amount": "Float", "description": "String", "quantity": "Integer", "unit_price": "Float"}]}], "original_result": "Json with original response of provider", "number_of_pages": "Integer", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["OCR"]}, "parameters": []}, "/pretrained/ocr/ocr_tables": {"post": {"operationId": "ocr_tables", "description": "The OCR Table API allows customers to analyze documents containing tables and return structured representation of said tables in the form of a Json object\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**German**|`string`|`de-DE`|\n|**Italian**|`string`|`it-IT`|\n|**Portuguese**|`string`|`pt-PT`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "files", "in": "formData", "description": "File to analyse (ex: pdf, jpg, jpeg, png, tiff)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Providers to compare (ex: [ 'amazon', 'microsoft', 'google'])", "required": true, "type": "string", "minLength": 1}, {"name": "language", "in": "formData", "description": "Language code expected (ex: fr-FR)", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "ocr invoice response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "array", "type": "array", "items": {"type": "object", "properties": {"text": {"type": "string"}, "results": {"type": "array", "items": {"type": "object", "properties": {"word_text": {"type": "string"}, "left": {"type": "number"}, "top": {"type": "number"}, "width": {"type": "number"}, "hight": {"type": "number"}, "customer_information": {"type": "object", "properties": {"customer_address": {"type": "string"}, "customer_name": {"type": "string"}}}, "merchant_information": {"type": "object", "properties": {"merchant_address": {"type": "string"}, "merchant_name": {"type": "string"}}}, "invoice_total": {"type": "string"}, "subtotal": {"type": "string"}, "date": {"type": "string"}, "due_date": {"type": "string"}, "invoice_number": {"type": "string"}, "taxes": {"type": "string"}, "locale": {"type": "object", "properties": {"currency": {"type": "string"}, "language": {"type": "string"}}}, "item_lines": {"type": "array", "items": {"type": "object", "properties": {"amount": {"type": "string"}, "description": {"type": "string"}, "quantity": {"type": "string"}, "unit_price": {"type": "string"}}}}}}}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": 0, "original_result": "Json with original response of provider", "number_of_pages": "Integer", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["OCR"]}, "parameters": []}, "/pretrained/text/keyword_extraction": {"post": {"operationId": "keyword_extraction", "description": "Keyword extraction (also known as keyword detection or keyword analysis) is a text analysis technique that consists of automatically extracting the mostimportant words and expressions in a text.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**Finnish**|`string`|`fn-FN`|\n|**Swedish**|`string`|`sw-SW`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "language", "in": "formData", "description": "Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "text", "in": "formData", "description": "Text to analyze", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "keyword extraction response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "keywords": {"type": "array", "items": {"type": "string"}}, "importances": {"type": "array", "items": {"type": "number"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"text": "String [Input text]", "keywords": "Array of recognized keywords in the given text", "importances": "Array of importance of each keyword in the text"}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/text/named_entity_recognition": {"post": {"operationId": "named_entity_recognition", "description": "Named Entity Recognition (also called entity identification or entity extraction) is an information extraction technique that automatically identifies named entities in a text and classifies them into predefined categories.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**Finnish**|`string`|`fn-FN`|\n|**Swedish**|`string`|`sw-SW`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "language", "in": "formData", "description": "Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "text", "in": "formData", "description": "Text to analyze", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "named entities extraction response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "entities": {"type": "array", "items": {"type": "string"}}, "importances": {"type": "array", "items": {"type": "number"}}, "categories": {"type": "array", "items": {"type": "string"}}, "urls": {"type": "array", "items": {"type": "string"}}, "classifications": {"type": "array", "items": {"type": "object"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"text": "String [Input text]", "entities": "Array of recognized entities in the given text", "importances": "Array of importance of each entity in the text", "categories": "Array of categories of each entity in the text", "urls": "Array of locations of each entity in the text", "classification": "Json of entities classified by their category "}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/text/qestion-answer": {"post": {"operationId": "question_answering", "description": "Given a question, a set of documents, and some examples, the API generates an answer to the question based on the information in the set of documents.\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "texts", "in": "formData", "description": "List of texts to analyze", "required": true, "type": "string", "minLength": 1}, {"name": "question", "in": "formData", "description": "Question about the text content", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Providers to compare (ex: ['openai'])", "required": true, "type": "string", "minLength": 1}, {"name": "temperature", "in": "formData", "description": "Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.", "required": false, "type": "number", "default": 0.0, "maximum": 1, "minimum": 0}, {"name": "examples_context", "in": "formData", "description": "example text serving as context", "required": true, "type": "string", "minLength": 1}, {"name": "examples", "in": "formData", "description": "List of question/answer pairs (ex: [['When was Barack Obama elected president?', 'in 2009.'],])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "question & answer response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"type": "array", "items": "string"}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": "List[String]", "original_result": "Json with original response of provider", "number_of_pages": "Integer", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/text/search": {"post": {"operationId": "search", "description": "Given a query and a set of documents or labels, the model ranks each document based on its semantic similarity to the provided query.\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "texts", "in": "formData", "description": "Texts to search", "required": true, "type": "string", "minLength": 1}, {"name": "query", "in": "formData", "description": "Your query", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Providers to compare (ex: ['openai_davinci'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "search response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"type": "array", "items": {"type": "object", "properties": {"document": {"type": "number"}, "object": {"type": "string"}, "score": {"type": "number"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": [{"document": "Integer", "object": "String", "score": "Float"}], "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/text/sentiment_analysis": {"post": {"operationId": "sentiment_analysis", "description": "Sentiment analysis API extracts sentiment in a given string of text.Sentiment analysis, also called 'opinion mining',uses natural language processing, text analysis and computational linguistics to identify and detect subjective information from the input text.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**Dutch**|`string`|`nl-NL`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "language", "in": "formData", "description": "Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "text", "in": "formData", "description": "Text to analyze", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm', 'google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "sentiment analysis response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "sentiments": {"type": "array", "items": {"type": "string"}}, "sentiment_rate": {"type": "array", "items": {"type": "number"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"text": "String [Input text]", "sentiments": "Array of recognized sentiments in the given text", "sentiment_rate": "Array of rates of each sentiment in the text"}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/text/syntax_analysis": {"post": {"operationId": "syntax_analysis", "description": "Syntax analysis consists principaly in highlighting the structure of a text.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|\n|**French**|`string`|`fr-FR`|\n|**Spanish**|`string`|`es-ES`|\n|**Finnish**|`string`|`fn-FN`|\n|**Swedish**|`string`|`sw-SW`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "language", "in": "formData", "description": "Language code of text (ex: fr-FR (French), en-US (English), es-ES (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "text", "in": "formData", "description": "Text to analyze", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "syntax analysis response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "keywords": {"type": "array", "items": {"type": "string"}}, "importances": {"type": "array", "items": {"type": "number"}}, "tags": {"type": "array", "items": {"type": "string"}}, "lemmas": {"type": "array", "items": {"type": "string"}}, "others": {"type": "array", "items": {"type": "object"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"text": "String [Input text]", "keywords": "Array of words in the given text", "importances": "Array of scores of provider on the analysis of each word in the text", "tags": "Grammatical tags of each word in the text", "lemmas": "Array of lemmas of each word in the text", "others": "Array of other analysis provided for each word"}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/text/text_summarization": {"post": {"operationId": "text_summarization", "description": "Text summarization is a technique for extracting the most important sentences from a text in order to create a smaller version of the text.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**English(US)**|`string`|`en-US`|", "parameters": [{"name": "text", "in": "formData", "description": "Text to summarize", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'DataVoice','OpenAI', 'Microsoft'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "text summarization response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "summary": {"type": "string"}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"text": "String [Input text]", "summary": "String [Summary of the text]"}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Text"]}, "parameters": []}, "/pretrained/translation/automatic_translation": {"post": {"operationId": "automatic_translation", "description": "Machine translation refers to the translation of a text into another language using rules, statics or ml technics.\n\n**SUPPORTED LANGUAGE**\n\n|Name|Type|Value|\n|----|----|-----|\n|**Afrikaans**|`string`|`af-AF`|\n|**Albanian**|`string`|`sq-SQ`|\n|**Amharic**|`string`|`am-AM`|\n|**Arabic**|`string`|`ar-XA`|\n|**Armenian**|`string`|`hy-HY`|\n|**Azerbaijani**|`string`|`az-AZ`|\n|**Basque**|`string`|`eu-BA`|\n|**Belarusian**|`string`|`be-BE`|\n|**Bengali**|`string`|`bn-BN`|\n|**Bosnian**|`string`|`bs-BS`|\n|**Bulgarian**|`string`|`bg-BG`|\n|**Catalan**|`string`|`ca-ES`|\n|**Cebuano**|`string`|`ceb-CB`|\n|**Chinese-Simplified**|`string`|`zh-CN`|\n|**Chinese-Traditional**|`string`|`zh-TW`|\n|**Corsican**|`string`|`co-CO`|\n|**Croatian**|`string`|`hr-HR`|\n|**Czech**|`string`|`cz-CZ`|\n|**Danish**|`string`|`da-DK`|\n|**Dutch**|`string`|`nl-NL`|\n|**English**|`string`|`en-US`|\n|**Esperanto**|`string`|`eo-EO`|\n|**Estonian**|`string`|`et-ET`|\n|**Finnish**|`string`|`fn-FN`|\n|**French**|`string`|`fr-FR`|\n|**French-Canadian**|`string`|`fr-CA`|\n|**Frisian**|`string`|`fy-FY`|\n|**Galician**|`string`|`gl-GL`|\n|**Georgian**|`string`|`ka-KA`|\n|**German**|`string`|`de-DE`|\n|**Greek**|`string`|`gr-GR`|\n|**Gujarati**|`string`|`gu-GU`|\n|**Haitian-Creole**|`string`|`ht-HT`|\n|**Hausa**|`string`|`ha-HA`|\n|**Hawaiian**|`string`|`haw-HA`|\n|**Hebrew**|`string`|`he-HE`|\n|**Hindi**|`string`|`hi-HI`|\n|**Hmong**|`string`|`hmn_HM`|\n|**Hungarian**|`string`|`hu-HU`|\n|**Icelandic**|`string`|`is-IS`|\n|**Igbo**|`string`|`ig-IG`|\n|**Indonesian**|`string`|`id-ID`|\n|**Irish**|`string`|`ga-IR`|\n|**Italian**|`string`|`it-IT`|\n|**Japanese**|`string`|`ja-JP`|\n|**Javanese**|`string`|`jv-JV`|\n|**Kannada**|`string`|`kn-KN`|\n|**Kazakh**|`string`|`kk-KK`|\n|**Khmer**|`string`|`km-KM`|\n|**Korean**|`string`|`ko-KR`|\n|**Kurdish**|`string`|`ku-KU`|\n|**Kyrgyz**|`string`|`ky-KY`|\n|**Lao**|`string`|`lo-LO`|\n|**Latin**|`string`|`la-LA`|\n|**Latvian**|`string`|`lv-LV`|\n|**Lithuanian**|`string`|`lt-LT`|\n|**Luxembourgish**|`string`|`lb-LB`|\n|**Macedonian**|`string`|`mk-MK`|\n|**Malagasy**|`string`|`mg-MG`|\n|**Malay**|`string`|`ms-MY`|\n|**Malayalam**|`string`|`ml-ML`|\n|**Maltese**|`string`|`mt-MT`|\n|**Maori**|`string`|`mi-MI`|\n|**Marathi**|`string`|`mr-MR`|\n|**Mongolian**|`string`|`mn-MN`|\n|**Myanmar-Burmese**|`string`|`my-MY`|\n|**Nepali**|`string`|`ne-NE`|\n|**Norwegian**|`string`|`no-NO`|\n|**Nyanja Chichewa**|`string`|`ny-NY`|\n|**Pashto**|`string`|`ps-PS`|\n|**Persian**|`string`|`fa-FA`|\n|**Polish**|`string`|`pl-PO`|\n|**Portuguese**|`string`|`pt-PT`|\n|**Punjabi**|`string`|`pa-PA`|\n|**Romanian**|`string`|`ro-RO`|\n|**Russian**|`string`|`ru-RU`|\n|**Samoan**|`string`|`sm-SM`|\n|**Scots Gaelic**|`string`|`gd-GD`|\n|**Serbian**|`string`|`sr-SR`|\n|**Sesotho**|`string`|`st-ST`|\n|**Shona**|`string`|`sn-SN`|\n|**Sindhi**|`string`|`sd-SD`|\n|**Sinhala-Sinhalese**|`string`|`si-SI`|\n|**Slovak**|`string`|`sk-SK`|\n|**Slovenian**|`string`|`sl-SL`|\n|**Somali**|`string`|`so-SO`|\n|**Spanish**|`string`|`es-ES`|\n|**Sundanese**|`string`|`su-SU`|\n|**Swahili**|`string`|`sh-SH`|\n|**Swedish**|`string`|`sw-SW`|\n|**Tagalog-Filipino**|`string`|`tl-TL`|\n|**Tajik**|`string`|`tg-TG`|\n|**Tamil**|`string`|`ta-TA`|\n|**Telugu**|`string`|`te-TE`|\n|**Thai**|`string`|`th-TH`|\n|**Turkish**|`string`|`tr-TR`|\n|**Ukrainian**|`string`|`uk-UK`|\n|**Urdu**|`string`|`ur-UR`|\n|**Uzbek**|`string`|`uz-UZ`|\n|**Vietnamese**|`string`|`vi-VI`|\n|**Welsh**|`string`|`cy-CY`|\n|**Xhosa**|`string`|`xh-XH`|\n|**Yiddish**|`string`|`yi-YI`|\n|**Yoruba**|`string`|`yo-YO`|\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "text", "in": "formData", "description": "Text to translate", "required": true, "type": "string", "minLength": 1}, {"name": "source_language", "in": "formData", "description": "Language code of text (ex: fr (French), en (English), es (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "target_language", "in": "formData", "description": "Language code of text (ex: fr (French), en (English), es (Spanish))", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm', 'google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "translation response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"source_language": {"type": "string"}, "target_language": {"type": "string"}, "translated_text": {"type": "string"}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"source_language": "String", "target_language": "String", "translated_text": "String"}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded"], "tags": ["Translation"]}, "parameters": []}, "/pretrained/translation/language_detection": {"post": {"operationId": "language_detection", "description": "Language Detection or language guessing is the algorithm of determining which natural language given content is in.\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "text", "in": "formData", "description": "Text to analyze", "required": true, "type": "string", "minLength": 1}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'ibm','google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "language detection response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"text": {"type": "string"}, "languages": {"type": "array", "items": {"type": "string"}}, "confidences": {"type": "array", "items": {"type": "number"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"languages": "Array of detected languages", "confidences": "Array of confidence values for each detected language", "text": "String [The input text]"}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded"], "tags": ["Translation"]}, "parameters": []}, "/pretrained/vision/explicit_content_detection": {"post": {"operationId": "explicit_content_detection", "description": "Explicit Content Detection detects adult only content in videos, who is generally inappropriate for people under the age of 18 and includes nudity, sexual activity and pornography ...\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "files", "in": "formData", "description": "File Image to analyse (ex: pdf, jpg, jpeg, png, tiff)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft', 'google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "explicit content response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"image_path": {"type": "string"}, "labels": {"type": "array", "items": {"type": "string"}}, "likelihood": {"type": "array", "items": {"type": "number"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"image_path": "String [Input file name]", "labels": [], "likelihood": []}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["Vision"]}, "parameters": []}, "/pretrained/vision/face_detection": {"post": {"operationId": "face_detection", "description": "Face Detection is a computer technology being used in a variety of applicationsthat identifies human faces in digital images.\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "files", "in": "formData", "description": "File Image to analyse (ex: pdf, jpg, jpeg, png, tiff)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft','google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "face detection response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"image_path": {"type": "string"}, "attributes_label": {"type": "array", "items": {"type": "string"}}, "confidences": {"type": "array", "items": {"type": "number"}}, "x_mins": {"type": "array", "items": {"type": "number"}}, "x_maxs": {"type": "array", "items": {"type": "number"}}, "y_mins": {"type": "array", "items": {"type": "number"}}, "y_maxs": {"type": "array", "items": {"type": "number"}}, "landmarks": {"description": "object", "type": "object", "properties": {"LEFT_EYE": {"type": "array", "items": {"type": "number"}}, "RIGHT_EYE": {"type": "array", "items": {"type": "number"}}, "LEFT_OF_LEFT_EYEBROW": {"type": "array", "items": {"type": "number"}}, "RIGHT_OF_LEFT_EYEBROW": {"type": "array", "items": {"type": "number"}}, "LEFT_OF_RIGHT_EYEBROW": {"type": "array", "items": {"type": "number"}}, "RIGHT_OF_RIGHT_EYEBROW": {"type": "array", "items": {"type": "number"}}, "MIDPOINT_BETWEEN_EYES": {"type": "array", "items": {"type": "number"}}, "NOSE_TIP": {"type": "array", "items": {"type": "number"}}, "UPPER_LIP": {"type": "array", "items": {"type": "number"}}, "LOWER_LIP": {"type": "array", "items": {"type": "number"}}, "MOUTH_LEFT": {"type": "array", "items": {"type": "number"}}, "MOUTH_RIGHT": {"type": "array", "items": {"type": "number"}}, "MOUTH_CENTER": {"type": "array", "items": {"type": "number"}}, "NOSE_BOTTOM_RIGHT": {"type": "array", "items": {"type": "number"}}, "NOSE_BOTTOM_LEFT": {"type": "array", "items": {"type": "number"}}, "NOSE_BOTTOM_CENTER": {"type": "array", "items": {"type": "number"}}, "LEFT_EYE_TOP_BOUNDARY": {"type": "array", "items": {"type": "number"}}, "LEFT_EYE_RIGHT_CORNER": {"type": "array", "items": {"type": "number"}}, "LEFT_EYE_BOTTOM_BOUNDARY": {"type": "array", "items": {"type": "number"}}, "LEFT_EYE_LEFT_CORNER": {"type": "array", "items": {"type": "number"}}, "RIGHT_EYE_TOP_BOUNDARY": {"type": "array", "items": {"type": "number"}}, "RIGHT_EYE_RIGHT_CORNER": {"type": "array", "items": {"type": "number"}}, "RIGHT_EYE_BOTTOM_BOUNDARY": {"type": "array", "items": {"type": "number"}}, "RIGHT_EYE_LEFT_CORNER": {"type": "array", "items": {"type": "number"}}, "LEFT_EYEBROW_UPPER_MIDPOINT": {"type": "array", "items": {"type": "number"}}, "RIGHT_EYEBROW_UPPER_MIDPOINT": {"type": "array", "items": {"type": "number"}}, "LEFT_EAR_TRAGION": {"type": "array", "items": {"type": "number"}}, "RIGHT_EAR_TRAGION": {"type": "array", "items": {"type": "number"}}, "FOREHEAD_GLABELLA": {"type": "array", "items": {"type": "number"}}, "CHIN_GNATHION": {"type": "array", "items": {"type": "number"}}, "CHIN_LEFT_GONION": {"type": "array", "items": {"type": "number"}}, "CHIN_RIGHT_GONION": {"type": "array", "items": {"type": "number"}}, "LEFT_CHEEK_CENTER": {"type": "array", "items": {"type": "number"}}, "RIGHT_CHEEK_CENTER": {"type": "array", "items": {"type": "number"}}}}, "emotions": {"type": "object"}, "poses": {"type": "object"}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"image_path": "String [Input file name]", "attributes_label": [], "attributes_value": [], "confidences": [], "landmarks": [], "emotions": [], "poses": [], "x_mins": [], "x_maxs": [], "y_mins": [], "y_maxs": []}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["Vision"]}, "parameters": []}, "/pretrained/vision/object_detection": {"post": {"operationId": "object_detection", "description": "Object Detection is a computer vision technique that allows us to identify and locate objects in an image or video\n\n**AVAILABLE PROVIDERS** \n\n|Name|Value|Version|\n|----|-----|-------|\n", "parameters": [{"name": "files", "in": "formData", "description": "File Image to analyse (ex: pdf, jpg, jpeg, png, tiff)", "required": true, "type": "file"}, {"name": "providers", "in": "formData", "description": "Provider to compare (ex: [ 'amazon', 'microsoft','google'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "object detection response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"solution_name": {"type": "string"}, "provider": {"type": "string"}, "status": {"type": "string"}, "execution_time": {"type": "number"}, "original_result": {"type": "object"}, "result": {"description": "object", "type": "object", "properties": {"file_name": {"type": "string"}, "labels": {"type": "array", "items": {"type": "string"}}, "confidences": {"type": "array", "items": {"type": "number"}}, "x_mins": {"type": "array", "items": {"type": "number"}}, "x_maxs": {"type": "array", "items": {"type": "number"}}, "y_mins": {"type": "array", "items": {"type": "number"}}, "y_maxs": {"type": "array", "items": {"type": "number"}}}}}}}}}, "examples": {"application/json": {"result": [{"solution_name": "String [The full name of provider]", "provider": "String [The input name of provider]", "execution_time": "Float", "result": {"filename": "String [Input text]", "labels": [], "confidences": [], "x_mins": [], "y_mins": [], "y_maxs": []}, "original_result": "Json with original response of provider", "status": "success"}, {"solution_name": "String", "provider": "String", "error": "String", "status": "fail"}]}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["multipart/form-data"], "tags": ["Vision"]}, "parameters": []}, "/tools/search": {"post": {"operationId": "Search", "description": "This is an easy tool to lookup for a list of words in a given text", "parameters": [{"name": "text", "in": "formData", "description": "Text to analyze", "required": true, "type": "string", "minLength": 5}, {"name": "words", "in": "formData", "description": "(ex: [ 'Happy', 'New', 'Year'])", "required": true, "type": "string", "minLength": 1}], "responses": {"200": {"description": "Success", "schema": {"description": "eden ai search response", "type": "object", "properties": {"result": {"type": "array", "items": {"type": "object", "properties": {"status": {"type": "string"}, "execution_time": {"type": "number"}, "result": {"description": "object", "type": "object"}}}}}}, "examples": {"application/json": {"result": {"execution_time": "Time (in seconds) needed to lookup words in the given text", "result": {"word1": true, "word2": false}, "status": "success"}}}}, "400": {"description": "Bad Request", "examples": {"application/json": {"error": {"type": "Invalid request", "message": "Json with error messages and fields"}}}}, "403": {"description": "Forbidden", "examples": {"application/json": {"error": {"type": "Bad Credentials", "message": "Please enter a valid token"}}}}, "500": {"description": "Server error", "examples": {"application/json": {"error": {"type": "Internal server error"}}}}}, "consumes": ["application/x-www-form-urlencoded", "multipart/form-data"], "tags": ["Eden AI tools"]}, "parameters": []}}, "definitions": {}}